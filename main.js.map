{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/mesto-project-ff/webpack/bootstrap","webpack://mesto-project-ff/mesto-project-ff/webpack/runtime/define property getters","webpack://mesto-project-ff/mesto-project-ff/webpack/runtime/hasOwnProperty shorthand","webpack://mesto-project-ff/mesto-project-ff/src/components/modal.js","webpack://mesto-project-ff/mesto-project-ff/src/components/api.js","webpack://mesto-project-ff/mesto-project-ff/src/components/cards.js","webpack://mesto-project-ff/mesto-project-ff/src/components/validation.js","webpack://mesto-project-ff/mesto-project-ff/src/components/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","//функция открытия попапа\r\nconst openModal = (modal) => {\r\n  modal.classList.add(\"popup_is-animated\"); // анимация\r\n  setTimeout(() => {\r\n    modal.classList.add(\"popup_is-opened\"); // открытие\r\n  }, 1);\r\n\r\n  // Навешиваем обработчик Escape\r\n  document.addEventListener(\"keydown\", handleEscape);\r\n};\r\n\r\n//функция закрытия попапа\r\nfunction closeModal(modal) {\r\n  modal.classList.remove(\"popup_is-opened\");\r\n  document.removeEventListener(\"keydown\", handleEscape);\r\n}\r\n\r\n// Функция обработки нажатия клавиши Escape\r\nfunction handleEscape(evt) {\r\n  if (evt.key === \"Escape\") {\r\n    const openedPopup = document.querySelector(\".popup_is-opened\");\r\n    if (openedPopup) {\r\n      closeModal(openedPopup);\r\n    }\r\n  }\r\n}\r\n\r\nexport { openModal, closeModal };\r\n","import { placesList, createCard } from \"./cards.js\";\r\n\r\n//Конфиг http-запросов\r\nconst config = {\r\n  path: \"https://nomoreparties.co/v1\",\r\n  cohortId: \"wff-cohort-17\",\r\n  headers: {\r\n    authorization: \"1d7c5a36-10fe-4288-b8a8-123b41ec80c9\",\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n};\r\n\r\nlet userId = \"\";\r\n\r\nconst avatarElement = document.querySelector(\".profile__image\");\r\nconst profileTitle = document.querySelector(\".profile__title\");\r\nconst profileSubtitle = document.querySelector(\".profile__description\");\r\n\r\n//Запросы на сервер----------------------------------------------------------------\r\n\r\nconst handleRequest = (res) => {\r\n  if (res.ok) {\r\n    return res.json();\r\n  }\r\n  return Promise.reject(`Ошибка: ${res.status}`);\r\n};\r\n\r\n// Получение данных пользователя с сервера\r\nconst getUserProfile = () => {\r\n  return fetch(`${config.path}/${config.cohortId}/users/me`, {\r\n    method: \"GET\",\r\n    headers: config.headers,\r\n  }).then(handleRequest);\r\n};\r\n\r\n//Получение данных карточек\r\nconst getCards = () => {\r\n  return fetch(`${config.path}/${config.cohortId}/cards`, {\r\n    method: \"GET\",\r\n    headers: config.headers,\r\n  }).then(handleRequest);\r\n};\r\n\r\n//Объединенение запросов для получения данных пользователя и карточек\r\nconst getPromisesUserCards = () => {\r\n  Promise.all([getUserProfile(), getCards()])\r\n    .then(([userData, cardsData]) => {\r\n      //данные пользователя\r\n      console.log(\"Данные пользователя получены\", userData);\r\n      profileTitle.textContent = userData.name;\r\n      profileSubtitle.textContent = userData.about;\r\n      avatarElement.style.backgroundImage = `url(${userData.avatar})`;\r\n      userId = userData._id;\r\n\r\n      // Обработка данных карточек\r\n      console.log(\"Карточки получены\", cardsData);\r\n      cardsData.forEach((cardData) => {\r\n        const cardElement = createCard(cardData, userId);\r\n        if (cardData.owner._id !== userId) {\r\n          cardElement.querySelector(\".card__delete-button\").remove();\r\n        }\r\n        placesList.append(cardElement);\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      console.log(\"Произошла ошибка\", error);\r\n    });\r\n};\r\n\r\n//Обновление профиля\r\nconst updateProfileByUser = (name, about) => {\r\n  return fetch(`${config.path}/${config.cohortId}/users/me`, {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name: name,\r\n      about: about,\r\n    }),\r\n  })\r\n    .then(handleRequest)\r\n    .then((data) => {\r\n      console.log(\"Данные пользователя обновлены\", data);\r\n      profileTitle.textContent = data.name;\r\n      profileSubtitle.textContent = data.about;\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      console.log(\"Произошла ошибка при обновлении данных пользователя\", error);\r\n    });\r\n};\r\n\r\n// замена аватара\r\nconst updateAvatar = (avatarUrl) => {\r\n  return fetch(`${config.path}/${config.cohortId}/users/me/avatar`, {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      avatar: avatarUrl,\r\n    }),\r\n  }).then(handleRequest);\r\n};\r\n\r\n//Добавление новой карточки\r\nconst handleCardAdded = (nameCard, linkCard) => {\r\n  return fetch(`${config.path}/${config.cohortId}/cards`, {\r\n    method: \"POST\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name: nameCard,\r\n      link: linkCard,\r\n    }),\r\n  }).then(handleRequest);\r\n};\r\n\r\n//Добавление лайка\r\nconst addLike = (cardId) => {\r\n  return fetch(`${config.path}/${config.cohortId}/cards/likes/${cardId}`, {\r\n    method: \"PUT\",\r\n    headers: config.headers,\r\n  }).then(handleRequest);\r\n};\r\n\r\n//Снятие лайка\r\nconst deleteLike = (cardId) => {\r\n  return fetch(`${config.path}/${config.cohortId}/cards/likes/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers,\r\n  }).then(handleRequest);\r\n};\r\n\r\n//Удаление карточки\r\nconst deleteCard = (cardId) => {\r\n  return fetch(`${config.path}/${config.cohortId}/cards/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers,\r\n  }).then(handleRequest);\r\n};\r\n\r\nexport {\r\n  updateProfileByUser,\r\n  updateAvatar,\r\n  getPromisesUserCards,\r\n  profileTitle,\r\n  profileSubtitle,\r\n  handleCardAdded,\r\n  deleteCard,\r\n  addLike,\r\n  deleteLike,\r\n};\r\n","// @todo: Темплейт карточки\r\nconst cardTemplate = document.querySelector(\"#card-template\").content;\r\n// DOM узлы\r\nconst placesList = document.querySelector(\".places__list\"); //Карточка\r\n\r\n//лайки\r\n\r\nimport { openModal, closeModal } from \"./modal.js\";\r\n\r\nimport { handleImageClick } from \"./index.js\";\r\n\r\nimport { deleteCard, addLike, deleteLike } from \"./api.js\";\r\n\r\nfunction createCard(card, user) {\r\n  const cardElement = cardTemplate\r\n    .querySelector(\".places__item\")\r\n    .cloneNode(true); // клонирование\r\n\r\n  const cardImage = cardElement.querySelector(\".card__image\"); // картинка определение константы\r\n  cardElement.querySelector(\".card__title\").textContent = card.name; //название карточки\r\n  cardImage.alt = card.name; // название изображения\r\n  cardImage.src = card.link; // ссылка на изображение\r\n  //лайки на карточке\r\n  const countLike = cardElement.querySelector(\".card__like-count\"); //счетчик кнопки лайк\r\n  const likeButton = cardElement.querySelector(\".card__like-button\"); //кнопка лайк\r\n  countLike.textContent = card.likes.length;\r\n\r\n  //обработчик открытия попапа/картинка\r\n  cardImage.addEventListener(\"click\", function () {\r\n    handleImageClick(card.link, card.name);\r\n  });\r\n\r\n  //установка лайка при перезагрузке\r\n  if (card.likes.some((like) => like._id === user)) {\r\n    likeButton.classList.add(\"card__like-button_is-active\");\r\n  }\r\n\r\n  //обработчик лайка карточки\r\n  cardElement\r\n    .querySelector(\".card__like-button\")\r\n    .addEventListener(\"click\", function (evt) {\r\n      if (likeButton.classList.contains(\"card__like-button_is-active\")) {\r\n        deleteLike(card._id)\r\n          .then((card) => {\r\n            likeButton.classList.toggle(\"card__like-button_is-active\");\r\n            countLike.textContent = card.likes.length;\r\n            console.log(`C карточки с id ${card._id} лайк удален`);\r\n          })\r\n          .catch((error) => console.error(\"Error removing like:\", error));\r\n      } else {\r\n        addLike(card._id)\r\n          .then((card) => {\r\n            likeButton.classList.toggle(\"card__like-button_is-active\");\r\n            countLike.textContent = card.likes.length;\r\n            console.log(`На карточку с id ${card._id} поставлен лайк`);\r\n          })\r\n          .catch((error) => console.error(\"Error adding like:\", error));\r\n      }\r\n    });\r\n\r\n  const popupDeleteCard = document.querySelector(\r\n    \".popup_type_submit-delete-card\"\r\n  );\r\n  const buttonDeletePopup = popupDeleteCard.querySelector(\".popup__button\");\r\n\r\n  //обработчик открытия попапа удаления карточки\r\n  cardElement\r\n    .querySelector(\".card__delete-button\")\r\n    .addEventListener(\"click\", function () {\r\n      openModal(popupDeleteCard);\r\n      buttonDeletePopup.currentCardId = card._id; //сохранение id карточки для удаления\r\n      // Проверка, что обработчик добавлен только 1 раз\r\n      if (!buttonDeletePopup.deleteHandlerAdded) {\r\n        buttonDeletePopup.addEventListener(\r\n          \"click\",\r\n          function handleDeleteClick() {\r\n            //удаление карточки\r\n            const cardToDeleteId = buttonDeletePopup.currentCardId;\r\n            deleteCard(cardToDeleteId)\r\n              .then(() => {\r\n                const cardToDeleteElement = document.querySelector(\r\n                  `[data-id=\"${cardToDeleteId}\"]`\r\n                );\r\n                if (cardToDeleteElement) {\r\n                  cardToDeleteElement.remove();\r\n                  console.log(`Карточка с id ${cardToDeleteId} удалена`);\r\n                } else {\r\n                  console.error(`Карточка с id ${cardToDeleteId} не найдена`);\r\n                }\r\n                closeModal(popupDeleteCard); // закрытие попапа после удаления\r\n              })\r\n              .catch((error) => {\r\n                console.error(\"Ошибка удаления карточки:\", error);\r\n              });\r\n          }\r\n        );\r\n        buttonDeletePopup.deleteHandlerAdded = true;\r\n      }\r\n    });\r\n\r\n  cardElement.dataset.id = card._id;\r\n\r\n  return cardElement; // возвращение\r\n}\r\n\r\n//функция лайка карточки\r\nfunction likeCard(evt) {\r\n  evt.target.classList.toggle(\"card__like-button_is-active\");\r\n}\r\n\r\nexport { openModal, createCard, likeCard, placesList };\r\n","//формы\r\nconst formElement = document.querySelector(\".popup__form\");\r\nconst formInput = document.querySelector(\".popup__input\");\r\nconst formButton = document.querySelector(\".popup__button\");\r\n\r\n// Функция, которая включает валидацию для всех форм\r\nconst enableValidation = (settings) => {\r\n  const formList = Array.from(document.querySelectorAll(settings.formSelector));\r\n  formList.forEach((formElement) => {\r\n    formElement.addEventListener(\"submit\", (evt) => {\r\n      evt.preventDefault();\r\n    });\r\n    setEventListeners(formElement, settings);\r\n  });\r\n};\r\n\r\n// Функция, которая добавляет класс с ошибкой\r\nconst showInputError = (formElement, formInput, errorMessage, settings) => {\r\n  const errorElement = formElement.querySelector(`.${formInput.id}-error`);\r\n  // Остальной код такой же\r\n  formInput.classList.add(settings.inputErrorClass);\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add(settings.errorClass);\r\n};\r\n\r\n// Функция, которая удаляет класс с ошибкой\r\nconst hideInputError = (formElement, formInput, settings) => {\r\n  // Находим элемент ошибки\r\n  const errorElement = formElement.querySelector(`.${formInput.id}-error`);\r\n\r\n  formInput.classList.remove(settings.inputErrorClass);\r\n  errorElement.classList.remove(settings.errorClass);\r\n  errorElement.textContent = \"\";\r\n};\r\n\r\n// Функция, которая проверяет валидность поля\r\nconst isValid = (formElement, formInput, settings) => {\r\n  if (formInput.validity.patternMismatch) {\r\n    // встроенный метод setCustomValidity принимает на вход строку\r\n    // и заменяет ею стандартное сообщение об ошибке\r\n    formInput.setCustomValidity(formInput.dataset.errorMessage);\r\n  } else {\r\n    // если передать пустую строку, то будут доступны\r\n    // стандартные браузерные сообщения\r\n    formInput.setCustomValidity(\"\");\r\n  }\r\n  if (!formInput.validity.valid) {\r\n    showInputError(\r\n      formElement,\r\n      formInput,\r\n      formInput.validationMessage,\r\n      settings\r\n    );\r\n  } else {\r\n    // hideInputError теперь получает параметром форму, в которой\r\n    // находится проверяемое поле, и само это поле\r\n    hideInputError(formElement, formInput, settings);\r\n  }\r\n};\r\n\r\nconst setEventListeners = (formElement, settings) => {\r\n  // Находим все поля внутри формы\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(settings.inputSelector)\r\n  );\r\n  const formButtonList = Array.from(\r\n    formElement.querySelectorAll(settings.submitButtonSelector)\r\n  );\r\n  //переключение кнопки\r\n  toggleButtonState(inputList, formButtonList, settings);\r\n\r\n  // Обойдём все элементы полученной коллекции\r\n  inputList.forEach((formInput) => {\r\n    // каждому полю добавим обработчик события input\r\n    formInput.addEventListener(\"input\", function () {\r\n      isValid(formElement, formInput, settings);\r\n      toggleButtonState(inputList, formButtonList, settings);\r\n    });\r\n  });\r\n};\r\n\r\nconst hasInvalidInput = (inputList) => {\r\n  return inputList.some((formInput) => {\r\n    return !formInput.validity.valid;\r\n  });\r\n};\r\n\r\nconst toggleButtonState = (inputList, formButtonList, settings) => {\r\n  formButtonList.forEach((formButton) => {\r\n    formButton.disabled = true;\r\n    if (hasInvalidInput(inputList)) {\r\n      formButton.disabled = true;\r\n      formButton.classList.add(settings.inactiveButtonClass);\r\n    } else {\r\n      formButton.disabled = false;\r\n      formButton.classList.remove(settings.inactiveButtonClass);\r\n    }\r\n  });\r\n};\r\n\r\n// Функция, которая очищает ошибки валидации формы и делает кнопку неактивной\r\nconst clearValidation = (formElement, settings) => {\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(settings.inputSelector)\r\n  );\r\n  const formButtonList = Array.from(\r\n    formElement.querySelectorAll(settings.submitButtonSelector)\r\n  );\r\n\r\n  inputList.forEach((inputElement) => {\r\n    hideInputError(formElement, inputElement, settings);\r\n    inputElement.value = \"\"; // очищаем значение поля\r\n  });\r\n  toggleButtonState(inputList, formButtonList, settings);\r\n};\r\n\r\nexport { enableValidation, clearValidation, formButton };\r\n","// @todo: DOM узлы\r\nconst buttonAddCard = document.querySelector(\".profile__add-button\"); //Кнопка_+\r\nconst buttonProfileEdit = document.querySelector(\".profile__edit-button\"); //Кнопка_edit\r\nconst popupEdit = document.querySelector(\".popup_type_edit\"); //Попап редактирования профиля\r\nconst popupAddCard = document.querySelector(\".popup_type_new-card\"); //Попап создания новой карточки\r\n//константы формы добавления карточки\r\nconst popupFormImg = document.forms[\"new-place\"];\r\nconst formImgName = popupFormImg.elements[\"place-name\"];\r\nconst formImgLink = popupFormImg.elements[\"link\"];\r\n//константы формы редактирования профиля\r\nconst popupFormProfile = document.forms[\"edit-profile\"];\r\nconst nameInput = popupFormProfile.elements[\"name\"];\r\nconst jobInput = popupFormProfile.elements[\"description\"];\r\n//константы модального окна картинки\r\nconst popImage = document.querySelector(\".popup__image\"); //картинка в модальном окне\r\nconst popImageDescription = document.querySelector(\".popup__caption\");\r\nconst popupImage = document.querySelector(\".popup_type_image\"); //Попап открытия картинки\\\r\n//константы профиля\r\nconst avatarElement = document.querySelector(\".profile__image\");\r\nconst avatarButton = document.querySelector(\".profile__image-button\");\r\n//попап редактирования автара\r\nconst popupAvatar = document.querySelector(\".popup_type_new-avatar\");\r\nconst avatarInput = document.querySelector(\".popup__input_type-vatar-link\");\r\n\r\nimport \"../index.css\";\r\nimport { createCard, likeCard, placesList } from \"./cards.js\";\r\nimport { openModal, closeModal } from \"./modal.js\";\r\nimport { enableValidation, clearValidation } from \"./validation.js\";\r\n\r\nimport {\r\n  updateProfileByUser,\r\n  updateAvatar,\r\n  getPromisesUserCards,\r\n  profileTitle,\r\n  profileSubtitle,\r\n  handleCardAdded,\r\n} from \"./api.js\";\r\n\r\n//Функции----------------------------------------------------------------\r\n//Вызовы функций\r\ngetPromisesUserCards();\r\n\r\nconst validationSettings = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__button\",\r\n  inactiveButtonClass: \"button_inactive\",\r\n  inputErrorClass: \"form__input-error\",\r\n  errorClass: \"form__input-error_active\",\r\n};\r\n\r\n// Вызов функции для включения валидации с переданными настройками\r\nenableValidation(validationSettings);\r\n\r\n//функция добавления новой карточки пользователем\r\nfunction handleCardFormSubmit(evt) {\r\n  evt.preventDefault();\r\n  const name = formImgName.value;\r\n  const link = formImgLink.value;\r\n  changeNameButton(true);\r\n\r\n  handleCardAdded(name, link)\r\n    .then((cardData) => {\r\n      placesList.prepend(createCard(cardData, { likeCard, openModal }));\r\n      console.log(\"Карточка добавлена\", cardData);\r\n    })\r\n    .catch((error) => {\r\n      console.log(\"Произошла ошибка при добавлении карточки\", error);\r\n    })\r\n    .finally(() => {\r\n      changeNameButton(false);\r\n    });\r\n  closeModal(popupAddCard);\r\n  evt.target.reset();\r\n}\r\n\r\n// Функция открытия модального окна с картинкой\r\nexport const handleImageClick = (imageSrc, imageDescription) => {\r\n  if (popImage) {\r\n    popImage.src = imageSrc;\r\n    popImage.alt = imageDescription;\r\n    popImageDescription.textContent = imageDescription;\r\n  }\r\n  openModal(popupImage);\r\n};\r\n\r\n//функция замены аватара\r\nconst handleAvatarForm = (evt) => {\r\n  evt.preventDefault();\r\n  const avatarUrl = avatarInput.value;\r\n  changeNameButton(true);\r\n  updateAvatar(avatarUrl)\r\n    .then((data) => {\r\n      avatarElement.style.backgroundImage = `url(${data.avatar})`;\r\n      closeModal(popupAvatar);\r\n      console.log(\"Автар пользователя обновлен\");\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    })\r\n    .finally(() => {\r\n      changeNameButton(false);\r\n    });\r\n  evt.target.reset();\r\n};\r\n\r\n//Функция, смены названия кнопки при обработке данных в попапе\r\nconst changeNameButton = (isLoading) => {\r\n  const formButtonList = document.querySelectorAll(\".popup__button\");\r\n  formButtonList.forEach((formButton) => {\r\n    if (formButton.textContent !== \"Да\") {\r\n      formButton.textContent = isLoading ? \"Сохранение..\" : \"Сохранить\";\r\n    }\r\n  });\r\n};\r\n\r\n//Обработчики событий----------------------------------------------------------------\r\n// обработчики событий при загрузке\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  setupEventListeners();\r\n});\r\n\r\n// Обработчики событий для всех модальных окон\r\nfunction setupEventListeners() {\r\n  document.querySelectorAll(\".popup\").forEach((modal) => {\r\n    modal.querySelectorAll(\".popup__close\").forEach((button) => {\r\n      button.addEventListener(\"click\", () => closeModal(modal));\r\n    });\r\n\r\n    modal.addEventListener(\"click\", (evt) => {\r\n      if (evt.target === modal) {\r\n        closeModal(modal);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n//Обработчик «отправки» формы\r\nfunction handleProfileFormSubmit(evt) {\r\n  evt.preventDefault();\r\n  //поля формы\r\n  const nameValue = nameInput.value;\r\n  const jobValue = jobInput.value;\r\n\r\n  updateProfileByUser(nameValue, jobValue);\r\n  closeModal(popupEdit);\r\n}\r\n\r\n//обработчик «отправки» формы\r\npopupFormProfile.addEventListener(\"submit\", handleProfileFormSubmit);\r\n\r\n//обработчик открытия попапа/профиль\r\nbuttonProfileEdit.addEventListener(\"click\", function () {\r\n  //значения в модальном окне редактирования профиля\r\n  nameInput.value = profileTitle.textContent;\r\n  jobInput.value = profileSubtitle.textContent;\r\n  openModal(popupEdit);\r\n  clearValidation(popupEdit, validationSettings);\r\n});\r\n\r\n//обработчик открытия попапа/добавления\r\nbuttonAddCard.addEventListener(\"click\", function () {\r\n  openModal(popupAddCard);\r\n  clearValidation(popupAddCard, validationSettings);\r\n});\r\n\r\n//обработчик добавки новой карточки\r\npopupFormImg.addEventListener(\"submit\", handleCardFormSubmit);\r\n\r\n//Аватар------\r\n//Обработчик наведения на аватар/mouseover\r\navatarElement.addEventListener(\"mouseover\", () => {\r\n  avatarButton.classList.add(\"profile__image-button_active\");\r\n});\r\n\r\n//Обработчик наведения на аватар/mouseout\r\navatarElement.addEventListener(\"mouseout\", (evt) => {\r\n  if (!avatarElement.contains(evt.relatedTarget)) {\r\n    avatarButton.classList.remove(\"profile__image-button_active\");\r\n  }\r\n});\r\n\r\n//обработчик открытия редактирования аватара\r\navatarButton.addEventListener(\"click\", function () {\r\n  openModal(popupAvatar);\r\n  clearValidation(popupAvatar, validationSettings);\r\n});\r\n\r\n//обработчик «отправки» нового аватара\r\npopupAvatar.addEventListener(\"submit\", handleAvatarForm);\r\n"],"names":["e","d","t","n","o","Object","defineProperty","enumerable","get","prototype","hasOwnProperty","call","classList","add","setTimeout","document","addEventListener","remove","removeEventListener","key","querySelector","c","path","cohortId","headers","authorization","a","i","u","l","ok","json","Promise","reject","concat","status","s","content","p","f","r","cloneNode","textContent","name","alt","src","link","likes","length","M","some","_id","contains","fetch","method","then","toggle","console","log","error","currentCardId","deleteHandlerAdded","dataset","id","m","target","_","inputErrorClass","errorClass","h","forEach","disabled","validity","valid","inactiveButtonClass","v","Array","from","querySelectorAll","inputSelector","submitButtonSelector","value","y","S","b","g","E","forms","q","elements","L","k","C","A","description","x","I","w","O","T","j","P","all","about","style","backgroundImage","avatar","owner","append","D","B","formSelector","preventDefault","patternMismatch","setCustomValidity","errorMessage","validationMessage","H","body","JSON","stringify","prepend","likeCard","openModal","reset","relatedTarget"],"sourceRoot":""}