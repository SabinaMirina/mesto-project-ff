{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/cards.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/components/index.js"],"sourcesContent":["//Конфиг http-запросов\r\nconst config = {\r\n  path: \"https://nomoreparties.co/v1\",\r\n  cohortId: \"wff-cohort-17\",\r\n  headers: {\r\n    authorization: \"1d7c5a36-10fe-4288-b8a8-123b41ec80c9\",\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n};\r\n\r\n//Запросы на сервер----------------------------------------------------------------\r\n\r\nconst handleRequest = (res) => {\r\n  if (res.ok) {\r\n    return res.json();\r\n  }\r\n  return Promise.reject(`Ошибка: ${res.status}`);\r\n};\r\n\r\n// Получение данных пользователя с сервера\r\nconst getUserProfile = () => {\r\n  return fetch(`${config.path}/${config.cohortId}/users/me`, {\r\n    method: \"GET\",\r\n    headers: config.headers,\r\n  }).then(handleRequest);\r\n};\r\n\r\n//Получение данных карточек\r\nconst getCards = () => {\r\n  return fetch(`${config.path}/${config.cohortId}/cards`, {\r\n    method: \"GET\",\r\n    headers: config.headers,\r\n  }).then(handleRequest);\r\n};\r\n\r\n//Обновление профиля\r\nconst updateProfileByUser = (name, about) => {\r\n  return fetch(`${config.path}/${config.cohortId}/users/me`, {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name: name,\r\n      about: about,\r\n    }),\r\n  }).then(handleRequest);\r\n};\r\n\r\n// замена аватара\r\nconst updateAvatar = (avatarUrl) => {\r\n  return fetch(`${config.path}/${config.cohortId}/users/me/avatar`, {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      avatar: avatarUrl,\r\n    }),\r\n  }).then(handleRequest);\r\n};\r\n\r\n//Добавление новой карточки\r\nconst handleCardAdded = (nameCard, linkCard) => {\r\n  return fetch(`${config.path}/${config.cohortId}/cards`, {\r\n    method: \"POST\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name: nameCard,\r\n      link: linkCard,\r\n    }),\r\n  }).then(handleRequest);\r\n};\r\n\r\n//Добавление лайка\r\nconst addLike = (cardId) => {\r\n  return fetch(`${config.path}/${config.cohortId}/cards/likes/${cardId}`, {\r\n    method: \"PUT\",\r\n    headers: config.headers,\r\n  }).then(handleRequest);\r\n};\r\n\r\n//Снятие лайка\r\nconst deleteLike = (cardId) => {\r\n  return fetch(`${config.path}/${config.cohortId}/cards/likes/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers,\r\n  }).then(handleRequest);\r\n};\r\n\r\n//Удаление карточки\r\nconst deleteCard = (cardId) => {\r\n  return fetch(`${config.path}/${config.cohortId}/cards/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers,\r\n  }).then(handleRequest);\r\n};\r\n\r\nexport {\r\n  updateProfileByUser,\r\n  updateAvatar,\r\n  handleCardAdded,\r\n  deleteCard,\r\n  addLike,\r\n  deleteLike,\r\n  getUserProfile,\r\n  getCards,\r\n};\r\n","// @todo: Темплейт карточки\r\nconst cardTemplate = document.querySelector(\"#card-template\").content;\r\n// DOM узлы\r\nconst placesList = document.querySelector(\".places__list\"); //Карточка\r\n\r\nimport { addLike, deleteLike } from \"./api.js\";\r\n\r\nfunction createCard(card, user, { handleImageClick, openDeleteModal }) {\r\n  const cardElement = cardTemplate\r\n    .querySelector(\".places__item\")\r\n    .cloneNode(true); // клонирование\r\n\r\n  const cardImage = cardElement.querySelector(\".card__image\"); // картинка определение константы\r\n  cardElement.querySelector(\".card__title\").textContent = card.name; //название карточки\r\n  cardImage.alt = card.name; // название изображения\r\n  cardImage.src = card.link; // ссылка на изображение\r\n  //лайки на карточке\r\n  const countLike = cardElement.querySelector(\".card__like-count\"); //счетчик кнопки лайк\r\n  const likeButton = cardElement.querySelector(\".card__like-button\"); //кнопка лайк\r\n  countLike.textContent = card.likes.length;\r\n\r\n  //обработчик открытия попапа/картинка\r\n  cardImage.addEventListener(\"click\", function () {\r\n    handleImageClick(card.link, card.name);\r\n  });\r\n\r\n  //установка лайка при перезагрузке\r\n  if (card.likes.some((like) => like._id === user)) {\r\n    likeButton.classList.add(\"card__like-button_is-active\");\r\n  }\r\n\r\n  //обработчик лайка карточки\r\n  cardElement\r\n    .querySelector(\".card__like-button\")\r\n    .addEventListener(\"click\", function (evt) {\r\n      if (likeButton.classList.contains(\"card__like-button_is-active\")) {\r\n        deleteLike(card._id)\r\n          .then((card) => {\r\n            likeButton.classList.toggle(\"card__like-button_is-active\");\r\n            countLike.textContent = card.likes.length;\r\n          })\r\n          .catch((error) => console.error(\"Ошибка удаления лайка:\", error));\r\n      } else {\r\n        addLike(card._id)\r\n          .then((card) => {\r\n            likeButton.classList.toggle(\"card__like-button_is-active\");\r\n            countLike.textContent = card.likes.length;\r\n          })\r\n          .catch((error) => console.error(\"Ошибка добавления лайка:\", error));\r\n      }\r\n    });\r\n\r\n  const deleteButton = cardElement.querySelector(\".card__delete-button\");\r\n\r\n  //обработчик открытия попапа удаления карточки\r\n  deleteButton.addEventListener(\"click\", () =>\r\n    openDeleteModal(cardElement, card._id)\r\n  );\r\n\r\n  cardElement.dataset.id = card._id;\r\n\r\n  return cardElement; // возвращение\r\n}\r\n\r\n//функция лайка карточки\r\nfunction likeCard(evt) {\r\n  evt.target.classList.toggle(\"card__like-button_is-active\");\r\n}\r\n\r\nexport { createCard, likeCard, placesList };\r\n","//функция открытия попапа\r\nconst openModal = (modal) => {\r\n  modal.classList.add(\"popup_is-animated\"); // анимация\r\n  setTimeout(() => {\r\n    modal.classList.add(\"popup_is-opened\"); // открытие\r\n  }, 1);\r\n\r\n  // Навешиваем обработчик Escape\r\n  document.addEventListener(\"keydown\", handleEscape);\r\n};\r\n\r\n//функция закрытия попапа\r\nfunction closeModal(modal) {\r\n  modal.classList.remove(\"popup_is-opened\");\r\n  document.removeEventListener(\"keydown\", handleEscape);\r\n}\r\n\r\n// Функция обработки нажатия клавиши Escape\r\nfunction handleEscape(evt) {\r\n  if (evt.key === \"Escape\") {\r\n    const openedPopup = document.querySelector(\".popup_is-opened\");\r\n    if (openedPopup) {\r\n      closeModal(openedPopup);\r\n    }\r\n  }\r\n}\r\n\r\nexport { openModal, closeModal };\r\n","// Функция, которая включает валидацию для всех форм\r\nconst enableValidation = (settings) => {\r\n  const formList = Array.from(document.querySelectorAll(settings.formSelector));\r\n  formList.forEach((formElement) => {\r\n    formElement.addEventListener(\"submit\", (evt) => {\r\n      evt.preventDefault();\r\n    });\r\n    setEventListeners(formElement, settings);\r\n  });\r\n};\r\n\r\n// Функция, которая добавляет класс с ошибкой\r\nconst showInputError = (formElement, input, errorMessage, settings) => {\r\n  const errorElement = formElement.querySelector(`.${input.id}-error`);\r\n  input.classList.add(settings.inputErrorClass);\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add(settings.errorClass);\r\n};\r\n\r\n// Функция, которая удаляет класс с ошибкой\r\nconst hideInputError = (formElement, input, settings) => {\r\n  // Находим элемент ошибки\r\n  const errorElement = formElement.querySelector(`.${input.id}-error`);\r\n\r\n  input.classList.remove(settings.inputErrorClass);\r\n  errorElement.classList.remove(settings.errorClass);\r\n  errorElement.textContent = \"\";\r\n};\r\n\r\n// Функция, которая проверяет валидность поля\r\nconst isValid = (formElement, input, settings) => {\r\n  if (input.validity.patternMismatch) {\r\n    // встроенный метод setCustomValidity принимает на вход строку\r\n    // и заменяет ею стандартное сообщение об ошибке\r\n    input.setCustomValidity(input.dataset.errorMessage);\r\n  } else {\r\n    // если передать пустую строку, то будут доступны\r\n    // стандартные браузерные сообщения\r\n    input.setCustomValidity(\"\");\r\n  }\r\n  if (!input.validity.valid) {\r\n    showInputError(formElement, input, input.validationMessage, settings);\r\n  } else {\r\n    // hideInputError теперь получает параметром форму, в которой\r\n    // находится проверяемое поле, и само это поле\r\n    hideInputError(formElement, input, settings);\r\n  }\r\n};\r\n\r\nconst setEventListeners = (formElement, settings) => {\r\n  // Находим все поля внутри формы\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(settings.inputSelector)\r\n  );\r\n  const buttonList = Array.from(\r\n    formElement.querySelectorAll(settings.submitButtonSelector)\r\n  );\r\n  //переключение кнопки\r\n  toggleButtonState(inputList, buttonList, settings);\r\n\r\n  // Обойдём все элементы полученной коллекции\r\n  inputList.forEach((input) => {\r\n    // каждому полю добавим обработчик события input\r\n    input.addEventListener(\"input\", function () {\r\n      isValid(formElement, input, settings);\r\n      toggleButtonState(inputList, buttonList, settings);\r\n    });\r\n  });\r\n};\r\n\r\nconst hasInvalidInput = (inputList) => {\r\n  return inputList.some((input) => {\r\n    return !input.validity.valid;\r\n  });\r\n};\r\n\r\nconst toggleButtonState = (inputList, buttonList, settings) => {\r\n  buttonList.forEach((button) => {\r\n    button.disabled = true;\r\n    if (hasInvalidInput(inputList)) {\r\n      button.disabled = true;\r\n      button.classList.add(settings.inactiveButtonClass);\r\n    } else {\r\n      button.disabled = false;\r\n      button.classList.remove(settings.inactiveButtonClass);\r\n    }\r\n  });\r\n};\r\n\r\n// Функция, которая очищает ошибки валидации формы и делает кнопку неактивной\r\nconst clearValidation = (formElement, settings) => {\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(settings.inputSelector)\r\n  );\r\n  const buttonList = Array.from(\r\n    formElement.querySelectorAll(settings.submitButtonSelector)\r\n  );\r\n\r\n  inputList.forEach((input) => {\r\n    hideInputError(formElement, input, settings);\r\n    input.value = \"\"; // очищаем значение поля\r\n  });\r\n  toggleButtonState(inputList, buttonList, settings);\r\n};\r\n\r\nexport { enableValidation, clearValidation };\r\n","// @todo: DOM узлы\r\nconst buttonAddCard = document.querySelector(\".profile__add-button\"); //Кнопка_+\r\nconst buttonProfileEdit = document.querySelector(\".profile__edit-button\"); //Кнопка_edit\r\nconst popupEdit = document.querySelector(\".popup_type_edit\"); //Попап редактирования профиля\r\nconst popupAddCard = document.querySelector(\".popup_type_new-card\"); //Попап создания новой карточки\r\n//константы формы добавления карточки\r\nconst popupFormImg = document.forms[\"new-place\"];\r\nconst formImgName = popupFormImg.elements[\"place-name\"];\r\nconst formImgLink = popupFormImg.elements[\"link\"];\r\n//константы формы редактирования профиля\r\nconst popupFormProfile = document.forms[\"edit-profile\"];\r\nconst nameInput = popupFormProfile.elements[\"name\"];\r\nconst jobInput = popupFormProfile.elements[\"description\"];\r\nconst profileTitle = document.querySelector(\".profile__title\");\r\nconst profileSubtitle = document.querySelector(\".profile__description\");\r\n//константы модального окна картинки\r\nconst popImage = document.querySelector(\".popup__image\"); //картинка в модальном окне\r\nconst popImageDescription = document.querySelector(\".popup__caption\");\r\nconst popupImage = document.querySelector(\".popup_type_image\"); //Попап открытия картинки\\\r\n//константы профиля\r\nconst avatarElement = document.querySelector(\".profile__image\");\r\nconst avatarButton = document.querySelector(\".profile__image-button\");\r\nlet userId = \"\";\r\n//попап редактирования автара\r\nconst popupAvatar = document.querySelector(\".popup_type_new-avatar\");\r\nconst avatarInput = document.querySelector(\".popup__input_type-vatar-link\");\r\n//карточки\r\nlet currentCardElement = null;\r\nlet currentCardId = null;\r\n//попап удаления карточки\r\nconst popupDeleteCard = document.querySelector(\r\n  \".popup_type_submit-delete-card\"\r\n);\r\nconst buttonDeletePopup = popupDeleteCard.querySelector(\".popup__button\");\r\n\r\nimport \"../index.css\";\r\nimport { createCard, placesList } from \"./cards.js\";\r\nimport { openModal, closeModal } from \"./modal.js\";\r\nimport { enableValidation, clearValidation } from \"./validation.js\";\r\n\r\nimport {\r\n  updateProfileByUser,\r\n  updateAvatar,\r\n  handleCardAdded,\r\n  getUserProfile,\r\n  getCards,\r\n  deleteCard,\r\n} from \"./api.js\";\r\n\r\n//Функции----------------------------------------------------------------\r\n\r\nconst validationSettings = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__button\",\r\n  inactiveButtonClass: \"button_inactive\",\r\n  inputErrorClass: \"form__input-error\",\r\n  errorClass: \"form__input-error_active\",\r\n};\r\n\r\n// Вызов функции для включения валидации с переданными настройками\r\nenableValidation(validationSettings);\r\n\r\n//Объединенение запросов для получения данных пользователя и карточек\r\nconst getPromisesUserCards = () => {\r\n  Promise.all([getUserProfile(), getCards()])\r\n    .then(([userData, cardsData]) => {\r\n      //данные пользователя\r\n      profileTitle.textContent = userData.name;\r\n      profileSubtitle.textContent = userData.about;\r\n      avatarElement.style.backgroundImage = `url(${userData.avatar})`;\r\n      userId = userData._id;\r\n\r\n      // Обработка данных карточек\r\n      cardsData.forEach((cardData) => {\r\n        const cardElement = createCard(cardData, userId, {\r\n          handleImageClick,\r\n          openDeleteModal,\r\n        });\r\n        if (cardData.owner._id !== userId) {\r\n          cardElement.querySelector(\".card__delete-button\").remove();\r\n        }\r\n        placesList.append(cardElement);\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Произошла ошибка\", error);\r\n    });\r\n};\r\n\r\n//функция добавления новой карточки пользователем\r\nfunction handleCardFormSubmit(evt) {\r\n  evt.preventDefault();\r\n  const name = formImgName.value;\r\n  const link = formImgLink.value;\r\n  changeNameButton(true);\r\n\r\n  handleCardAdded(name, link)\r\n    .then((cardData) => {\r\n      placesList.prepend(\r\n        createCard(cardData, userId, { handleImageClick, openDeleteModal })\r\n      );\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Произошла ошибка при добавлении карточки\", error);\r\n    })\r\n    .finally(() => {\r\n      changeNameButton(false);\r\n    });\r\n  closeModal(popupAddCard);\r\n  evt.target.reset();\r\n}\r\n\r\n// Функция открытия модального окна с картинкой\r\nconst handleImageClick = (imageSrc, imageDescription) => {\r\n  if (popImage) {\r\n    popImage.src = imageSrc;\r\n    popImage.alt = imageDescription;\r\n    popImageDescription.textContent = imageDescription;\r\n  }\r\n  openModal(popupImage);\r\n};\r\n\r\n//функция открытия попапа удаления карточки\r\nfunction openDeleteModal(cardElement, cardId) {\r\n  currentCardElement = cardElement;\r\n  currentCardId = cardId; //сохранение id карточки для удаления\r\n  openModal(popupDeleteCard);\r\n}\r\n\r\n//Обработчик удаления карточки\r\n\r\n//функция замены аватара\r\nconst handleAvatarForm = (evt) => {\r\n  evt.preventDefault();\r\n  const avatarUrl = avatarInput.value;\r\n  changeNameButton(true);\r\n  updateAvatar(avatarUrl)\r\n    .then((data) => {\r\n      avatarElement.style.backgroundImage = `url(${data.avatar})`;\r\n      closeModal(popupAvatar);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Произошла ошибка при замене аватара\", error);\r\n    })\r\n    .finally(() => {\r\n      changeNameButton(false);\r\n    });\r\n  evt.target.reset();\r\n};\r\n\r\n//Функция, смены названия кнопки при обработке данных в попапе\r\nconst changeNameButton = (isLoading) => {\r\n  const formButtonList = document.querySelectorAll(\".popup__button\");\r\n  formButtonList.forEach((formButton) => {\r\n    if (formButton.textContent !== \"Да\") {\r\n      formButton.textContent = isLoading ? \"Сохранение..\" : \"Сохранить\";\r\n    }\r\n  });\r\n};\r\n\r\n//Вызовы функций\r\ngetPromisesUserCards();\r\n\r\n//Обработчики событий----------------------------------------------------------------\r\n// обработчики событий при загрузке\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  setupEventListeners();\r\n});\r\n\r\n// Обработчики событий для всех модальных окон\r\nfunction setupEventListeners() {\r\n  document.querySelectorAll(\".popup\").forEach((modal) => {\r\n    modal.querySelectorAll(\".popup__close\").forEach((button) => {\r\n      button.addEventListener(\"click\", () => closeModal(modal));\r\n    });\r\n\r\n    modal.addEventListener(\"click\", (evt) => {\r\n      if (evt.target === modal) {\r\n        closeModal(modal);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n//Обработчик удаления карточки в попапе удаления карточки\r\nbuttonDeletePopup.addEventListener(\"click\", function () {\r\n  deleteCard(currentCardId)\r\n    .then(() => {\r\n      const cardToDeleteElement = document.querySelector(\r\n        `[data-id=\"${currentCardId}\"]`\r\n      );\r\n      if (cardToDeleteElement) {\r\n        cardToDeleteElement.remove();\r\n      } else {\r\n        console.error(`Карточка с id ${currentCardId} не найдена`);\r\n      }\r\n      closeModal(popupDeleteCard); // закрытие попапа после удаления\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Ошибка удаления карточки:\", error);\r\n    });\r\n});\r\n\r\n//Обработчик «отправки» формы\r\nfunction handleProfileFormSubmit(evt) {\r\n  evt.preventDefault();\r\n  //поля формы\r\n  const nameValue = nameInput.value;\r\n  const jobValue = jobInput.value;\r\n\r\n  updateProfileByUser(nameValue, jobValue)\r\n    .then((data) => {\r\n      profileTitle.textContent = data.name;\r\n      profileSubtitle.textContent = data.about;\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      console.error(\r\n        \"Произошла ошибка при обновлении данных пользователя\",\r\n        error\r\n      );\r\n    });\r\n\r\n  closeModal(popupEdit);\r\n}\r\n\r\n//обработчик «отправки» формы\r\npopupFormProfile.addEventListener(\"submit\", handleProfileFormSubmit);\r\n\r\n//обработчик открытия попапа/профиль\r\nbuttonProfileEdit.addEventListener(\"click\", function () {\r\n  //значения в модальном окне редактирования профиля\r\n  nameInput.value = profileTitle.textContent;\r\n  jobInput.value = profileSubtitle.textContent;\r\n  openModal(popupEdit);\r\n  clearValidation(popupEdit, validationSettings);\r\n});\r\n\r\n//обработчик открытия попапа/добавления\r\nbuttonAddCard.addEventListener(\"click\", function () {\r\n  openModal(popupAddCard);\r\n  clearValidation(popupAddCard, validationSettings);\r\n});\r\n\r\n//обработчик добавки новой карточки\r\npopupFormImg.addEventListener(\"submit\", handleCardFormSubmit);\r\n\r\n//Аватар------\r\n//Обработчик наведения на аватар/mouseover\r\navatarElement.addEventListener(\"mouseover\", () => {\r\n  avatarButton.classList.add(\"profile__image-button_active\");\r\n});\r\n\r\n//Обработчик наведения на аватар/mouseout\r\navatarElement.addEventListener(\"mouseout\", (evt) => {\r\n  if (!avatarElement.contains(evt.relatedTarget)) {\r\n    avatarButton.classList.remove(\"profile__image-button_active\");\r\n  }\r\n});\r\n\r\n//обработчик открытия редактирования аватара\r\navatarButton.addEventListener(\"click\", function () {\r\n  openModal(popupAvatar);\r\n  clearValidation(popupAvatar, validationSettings);\r\n});\r\n\r\n//обработчик «отправки» нового аватара\r\npopupAvatar.addEventListener(\"submit\", handleAvatarForm);\r\n"],"names":["config","path","cohortId","headers","authorization","handleRequest","res","ok","json","Promise","reject","concat","status","cardTemplate","document","querySelector","content","placesList","createCard","card","user","_ref","handleImageClick","openDeleteModal","cardElement","cloneNode","cardImage","textContent","name","alt","src","link","countLike","likeButton","likes","length","addEventListener","some","like","_id","classList","add","evt","cardId","contains","fetch","method","then","toggle","error","console","addLike","dataset","id","openModal","modal","setTimeout","handleEscape","closeModal","remove","removeEventListener","key","openedPopup","hideInputError","formElement","input","settings","errorElement","inputErrorClass","errorClass","toggleButtonState","inputList","buttonList","forEach","button","disabled","validity","valid","hasInvalidInput","inactiveButtonClass","clearValidation","Array","from","querySelectorAll","inputSelector","submitButtonSelector","value","buttonAddCard","buttonProfileEdit","popupEdit","popupAddCard","popupFormImg","forms","formImgName","elements","formImgLink","popupFormProfile","nameInput","jobInput","profileTitle","profileSubtitle","popImage","popImageDescription","popupImage","avatarElement","avatarButton","userId","popupAvatar","avatarInput","currentCardId","popupDeleteCard","buttonDeletePopup","validationSettings","formSelector","preventDefault","patternMismatch","setCustomValidity","errorMessage","showInputError","validationMessage","isValid","setEventListeners","imageSrc","imageDescription","changeNameButton","isLoading","formButton","all","_ref2","userData","cardsData","about","style","backgroundImage","avatar","cardData","owner","append","target","cardToDeleteElement","body","JSON","stringify","data","nameCard","linkCard","prepend","reset","relatedTarget","avatarUrl","updateAvatar"],"sourceRoot":""}