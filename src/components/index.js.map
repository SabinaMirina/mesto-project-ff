{"version":3,"file":"./src/components/index.js","mappings":"mBACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,I,kBCClF,IAAMI,EAAY,SAACC,GACjBA,EAAMC,UAAUC,IAAI,qBACpBC,YAAW,WACTH,EAAMC,UAAUC,IAAI,kBACtB,GAAG,GAGHE,SAASC,iBAAiB,UAAWC,EACvC,EAGA,SAASC,EAAWP,GAClBA,EAAMC,UAAUO,OAAO,mBACvBJ,SAASK,oBAAoB,UAAWH,EAC1C,CAGA,SAASA,EAAaI,GACpB,GAAgB,WAAZA,EAAItB,IAAkB,CACxB,IAAMuB,EAAcP,SAASQ,cAAc,oBACvCD,GACFJ,EAAWI,EAEf,CACF,C,0GCtBA,IAAME,EAAS,CACbC,KAAM,8BACNC,SAAU,gBACVC,QAAS,CACPC,cAAe,uCACf,eAAgB,qBAIhBC,EAAS,GAEPC,EAAgBf,SAASQ,cAAc,mBACvCQ,EAAehB,SAASQ,cAAc,mBACtCS,EAAkBjB,SAASQ,cAAc,yBAIzCU,EAAgB,SAACC,GACrB,OAAIA,EAAIC,GACCD,EAAIE,OAENC,QAAQC,OAAO,WAADC,OAAYL,EAAIM,QACvC,ECxBMC,EAAe1B,SAASQ,cAAc,kBAAkBmB,QAExDC,EAAa5B,SAASQ,cAAc,iBAU1C,SAASqB,EAAWC,EAAMC,GACxB,IAAMC,EAAcN,EACjBlB,cAAc,iBACdyB,WAAU,GAEPC,EAAYF,EAAYxB,cAAc,gBAC5CwB,EAAYxB,cAAc,gBAAgB2B,YAAcL,EAAKM,KAC7DF,EAAUG,IAAMP,EAAKM,KACrBF,EAAUI,IAAMR,EAAKS,KAErB,IAAMC,EAAYR,EAAYxB,cAAc,qBACtCiC,EAAaT,EAAYxB,cAAc,sBAC7CgC,EAAUL,YAAcL,EAAKY,MAAMC,OAGnCT,EAAUjC,iBAAiB,SAAS,WAClC2C,EAAiBd,EAAKS,KAAMT,EAAKM,KACnC,IAGIN,EAAKY,MAAMG,MAAK,SAACC,GAAI,OAAKA,EAAKC,MAAQhB,CAAI,KAC7CU,EAAW5C,UAAUC,IAAI,+BAI3BkC,EACGxB,cAAc,sBACdP,iBAAiB,SAAS,SAAUK,GDmFtB,IAAC0C,EClFVP,EAAW5C,UAAUoD,SAAS,gCDkFpBD,ECjFDlB,EAAKiB,IDkFfG,MAAM,GAAD1B,OAAIf,EAAOC,KAAI,KAAAc,OAAIf,EAAOE,SAAQ,iBAAAa,OAAgBwB,GAAU,CACtEG,OAAQ,SACRvC,QAASH,EAAOG,UACfwC,KAAKlC,ICpFCkC,MAAK,SAACtB,GACLW,EAAW5C,UAAUwD,OAAO,+BAC5Bb,EAAUL,YAAcL,EAAKY,MAAMC,OACnCW,QAAQC,IAAI,mBAAD/B,OAAoBM,EAAKiB,IAAG,gBACzC,IAAE,OACK,SAACS,GAAK,OAAKF,QAAQE,MAAM,uBAAwBA,EAAM,IDmExD,SAACR,GACf,OAAOE,MAAM,GAAD1B,OAAIf,EAAOC,KAAI,KAAAc,OAAIf,EAAOE,SAAQ,iBAAAa,OAAgBwB,GAAU,CACtEG,OAAQ,MACRvC,QAASH,EAAOG,UACfwC,KAAKlC,EACV,CCtEQuC,CAAQ3B,EAAKiB,KACVK,MAAK,SAACtB,GACLW,EAAW5C,UAAUwD,OAAO,+BAC5Bb,EAAUL,YAAcL,EAAKY,MAAMC,OACnCW,QAAQC,IAAI,oBAAD/B,OAAqBM,EAAKiB,IAAG,mBAC1C,IAAE,OACK,SAACS,GAAK,OAAKF,QAAQE,MAAM,qBAAsBA,EAAM,GAElE,IAEF,IAAME,EAAkB1D,SAASQ,cAC/B,kCAEImD,EAAoBD,EAAgBlD,cAAc,kBAuCxD,OApCAwB,EACGxB,cAAc,wBACdP,iBAAiB,SAAS,WACzBN,EAAU+D,GACVC,EAAkBC,cAAgB9B,EAAKiB,IAElCY,EAAkBE,qBACrBF,EAAkB1D,iBAChB,SACA,WAEE,IDsDQ+C,ECtDFc,EAAiBH,EAAkBC,eDsDjCZ,ECrDGc,EDsDdZ,MAAM,GAAD1B,OAAIf,EAAOC,KAAI,KAAAc,OAAIf,EAAOE,SAAQ,WAAAa,OAAUwB,GAAU,CAChEG,OAAQ,SACRvC,QAASH,EAAOG,UACfwC,KAAKlC,ICxDKkC,MAAK,WACJ,IAAMW,EAAsB/D,SAASQ,cAAc,aAADgB,OACnCsC,EAAc,OAEzBC,GACFA,EAAoB3D,SACpBkD,QAAQC,IAAI,iBAAD/B,OAAkBsC,EAAc,cAE3CR,QAAQE,MAAM,iBAADhC,OAAkBsC,EAAc,gBAE/C3D,EAAWuD,EACb,IAAE,OACK,SAACF,GACNF,QAAQE,MAAM,4BAA6BA,EAC7C,GACJ,IAEFG,EAAkBE,oBAAqB,EAE3C,IAEF7B,EAAYgC,QAAQC,GAAKnC,EAAKiB,IAEvBf,CACT,CAGA,SAASkC,EAAS5D,GAChBA,EAAI6D,OAAOtE,UAAUwD,OAAO,8BAC9B,CC3GoBrD,SAASQ,cAAc,gBACzBR,SAASQ,cAAc,iBACtBR,SAASQ,cAAc,kBAF1C,IAyBM4D,EAAiB,SAACC,EAAaC,EAAWC,GAE9C,IAAMC,EAAeH,EAAY7D,cAAc,IAADgB,OAAK8C,EAAUL,GAAE,WAE/DK,EAAUzE,UAAUO,OAAOmE,EAASE,iBACpCD,EAAa3E,UAAUO,OAAOmE,EAASG,YACvCF,EAAarC,YAAc,EAC7B,EAsDMwC,EAAoB,SAACC,EAAWC,EAAgBN,GACpDM,EAAeC,SAAQ,SAACC,GACtBA,EAAWC,UAAW,EARF,SAACJ,GACvB,OAAOA,EAAU/B,MAAK,SAACyB,GACrB,OAAQA,EAAUW,SAASC,KAC7B,GACF,CAKQC,CAAgBP,IAClBG,EAAWC,UAAW,EACtBD,EAAWlF,UAAUC,IAAIyE,EAASa,uBAElCL,EAAWC,UAAW,EACtBD,EAAWlF,UAAUO,OAAOmE,EAASa,qBAEzC,GACF,EAGMC,EAAkB,SAAChB,EAAaE,GACpC,IAAMK,EAAYU,MAAMC,KACtBlB,EAAYmB,iBAAiBjB,EAASkB,gBAElCZ,EAAiBS,MAAMC,KAC3BlB,EAAYmB,iBAAiBjB,EAASmB,uBAGxCd,EAAUE,SAAQ,SAACa,GACjBvB,EAAeC,EAAasB,EAAcpB,GAC1CoB,EAAaC,MAAQ,EACvB,IACAjB,EAAkBC,EAAWC,EAAgBN,EAC/C,ECjHMsB,EAAgB7F,SAASQ,cAAc,wBACvCsF,EAAoB9F,SAASQ,cAAc,yBAC3CuF,EAAY/F,SAASQ,cAAc,oBACnCwF,EAAehG,SAASQ,cAAc,wBAEtCyF,EAAejG,SAASkG,MAAM,aAC9BC,EAAcF,EAAaG,SAAS,cACpCC,EAAcJ,EAAaG,SAAe,KAE1CE,EAAmBtG,SAASkG,MAAM,gBAClCK,EAAYD,EAAiBF,SAAe,KAC5CI,EAAWF,EAAiBF,SAAsB,YAElDK,EAAWzG,SAASQ,cAAc,iBAClCkG,EAAsB1G,SAASQ,cAAc,mBAC7CmG,EAAa3G,SAASQ,cAAc,qBAEpCO,EAAgBf,SAASQ,cAAc,mBACvCoG,EAAe5G,SAASQ,cAAc,0BAEtCqG,EAAc7G,SAASQ,cAAc,0BACrCsG,EAAc9G,SAASQ,cAAc,iCHuBzCc,QAAQyF,IAAI,CAhBL7D,MAAM,GAAD1B,OAAIf,EAAOC,KAAI,KAAAc,OAAIf,EAAOE,SAAQ,aAAa,CACzDwC,OAAQ,MACRvC,QAASH,EAAOG,UACfwC,KAAKlC,GAKDgC,MAAM,GAAD1B,OAAIf,EAAOC,KAAI,KAAAc,OAAIf,EAAOE,SAAQ,UAAU,CACtDwC,OAAQ,MACRvC,QAASH,EAAOG,UACfwC,KAAKlC,KAMLkC,MAAK,SAAA4D,GAA2B,I,IAAAC,G,EAAA,E,4CAAAD,I,o2BAAzBE,EAAQD,EAAA,GAAEE,EAASF,EAAA,GAEzB3D,QAAQC,IAAI,+BAAgC2D,GAC5ClG,EAAamB,YAAc+E,EAAS9E,KACpCnB,EAAgBkB,YAAc+E,EAASE,MACvCrG,EAAcsG,MAAMC,gBAAkB,OAAH9F,OAAU0F,EAASK,OAAM,KAC5DzG,EAASoG,EAASnE,IAGlBO,QAAQC,IAAI,oBAAqB4D,GACjCA,EAAUrC,SAAQ,SAAC0C,GACjB,IAAMxF,EAAcH,EAAW2F,EAAU1G,GACrC0G,EAASC,MAAM1E,MAAQjC,GACzBkB,EAAYxB,cAAc,wBAAwBJ,SAEpDwB,EAAW8F,OAAO1F,EACpB,GACF,IAAE,OACK,SAACwB,GACNF,QAAQC,IAAI,mBAAoBC,EAClC,IGxBJ,IDpC0Be,ECoCpBoD,EAAqB,CACzBC,aAAc,eACdnC,cAAe,gBACfC,qBAAsB,iBACtBN,oBAAqB,kBACrBX,gBAAiB,oBACjBC,WAAY,4BD1CYH,EC8CToD,ED7CErC,MAAMC,KAAKvF,SAASwF,iBAAiBjB,EAASqD,eACtD9C,SAAQ,SAACT,GAChBA,EAAYpE,iBAAiB,UAAU,SAACK,GACtCA,EAAIuH,gBACN,IAiDsB,SAACxD,EAAaE,GAEtC,IAAMK,EAAYU,MAAMC,KACtBlB,EAAYmB,iBAAiBjB,EAASkB,gBAElCZ,EAAiBS,MAAMC,KAC3BlB,EAAYmB,iBAAiBjB,EAASmB,uBAGxCf,EAAkBC,EAAWC,EAAgBN,GAG7CK,EAAUE,SAAQ,SAACR,GAEjBA,EAAUrE,iBAAiB,SAAS,YAtCxB,SAACoE,EAAaC,EAAWC,GACnCD,EAAUW,SAAS6C,gBAGrBxD,EAAUyD,kBAAkBzD,EAAUN,QAAQgE,cAI9C1D,EAAUyD,kBAAkB,IAEzBzD,EAAUW,SAASC,MAUtBd,EAAeC,EAAaC,EAAWC,GAvCpB,SAACF,EAAaC,EAAW0D,EAAczD,GAC5D,IAAMC,EAAeH,EAAY7D,cAAc,IAADgB,OAAK8C,EAAUL,GAAE,WAE/DK,EAAUzE,UAAUC,IAAIyE,EAASE,iBACjCD,EAAarC,YAAc6F,EAC3BxD,EAAa3E,UAAUC,IAAIyE,EAASG,WACtC,CAwBIuD,CACE5D,EACAC,EACAA,EAAU4D,kBACV3D,EAON,CAiBM4D,CAAQ9D,EAAaC,EAAWC,GAChCI,EAAkBC,EAAWC,EAAgBN,EAC/C,GACF,GACF,CAnEI6D,CAAkB/D,EAAaE,EACjC,ICgEK,IAAM3B,EAAmB,SAACyF,EAAUC,GACrC7B,IACFA,EAASnE,IAAM+F,EACf5B,EAASpE,IAAMiG,EACf5B,EAAoBvE,YAAcmG,GAEpC3I,EAAUgH,EACZ,EAuBM4B,EAAmB,SAACC,GACDxI,SAASwF,iBAAiB,kBAClCV,SAAQ,SAACC,GACS,OAA3BA,EAAW5C,cACb4C,EAAW5C,YAAcqG,EAAY,eAAiB,YAE1D,GACF,EAIAxI,SAASC,iBAAiB,oBAAoB,WAM5CD,SAASwF,iBAAiB,UAAUV,SAAQ,SAAClF,GAC3CA,EAAM4F,iBAAiB,iBAAiBV,SAAQ,SAAC2D,GAC/CA,EAAOxI,iBAAiB,SAAS,kBAAME,EAAWP,EAAM,GAC1D,IAEAA,EAAMK,iBAAiB,SAAS,SAACK,GAC3BA,EAAI6D,SAAWvE,GACjBO,EAAWP,EAEf,GACF,GAdF,IA6BA0G,EAAiBrG,iBAAiB,UAXlC,SAAiCK,GAG/B,IHvE2B8B,EAAMgF,EGqEjC9G,EAAIuH,iBHrEuBzF,EGuETmE,EAAUX,MHvEKwB,EGwEhBZ,EAASZ,MHvEnB1C,MAAM,GAAD1B,OAAIf,EAAOC,KAAI,KAAAc,OAAIf,EAAOE,SAAQ,aAAa,CACzDwC,OAAQ,QACRvC,QAASH,EAAOG,QAChB8H,KAAMC,KAAKC,UAAU,CACnBxG,KAAMA,EACNgF,MAAOA,MAGRhE,KAAKlC,GACLkC,MAAK,SAACyF,GAIL,OAHAvF,QAAQC,IAAI,gCAAiCsF,GAC7C7H,EAAamB,YAAc0G,EAAKzG,KAChCnB,EAAgBkB,YAAc0G,EAAKzB,MAC5ByB,CACT,IAAE,OACK,SAACrF,GACNF,QAAQC,IAAI,sDAAuDC,EACrE,IGyDFrD,EAAW4F,EACb,IAMAD,EAAkB7F,iBAAiB,SAAS,WAE1CsG,EAAUX,MAAQ5E,EAAamB,YAC/BqE,EAASZ,MAAQ3E,EAAgBkB,YACjCxC,EAAUoG,GACVV,EAAgBU,EAAW4B,EAC7B,IAGA9B,EAAc5F,iBAAiB,SAAS,WACtCN,EAAUqG,GACVX,EAAgBW,EAAc2B,EAChC,IAGA1B,EAAahG,iBAAiB,UAhH9B,SAA8BK,GAC5BA,EAAIuH,iBACJ,IH8CuBiB,EAAUC,EG9C3B3G,EAAO+D,EAAYP,MACnBrD,EAAO8D,EAAYT,MACzB2C,GAAiB,IH4CMO,EG1CP1G,EH0CiB2G,EG1CXxG,EH2CfW,MAAM,GAAD1B,OAAIf,EAAOC,KAAI,KAAAc,OAAIf,EAAOE,SAAQ,UAAU,CACtDwC,OAAQ,OACRvC,QAASH,EAAOG,QAChB8H,KAAMC,KAAKC,UAAU,CACnBxG,KAAM0G,EACNvG,KAAMwG,MAEP3F,KAAKlC,IGjDLkC,MAAK,SAACoE,GACL5F,EAAWoH,QAAQnH,EAAW2F,EAAU,CAAEtD,SAAAA,EAAUvE,UAAAA,KACpD2D,QAAQC,IAAI,qBAAsBiE,EACpC,IAAE,OACK,SAAChE,GACNF,QAAQC,IAAI,2CAA4CC,EAC1D,IAAE,SACO,WACP+E,GAAiB,EACnB,IACFpI,EAAW6F,GACX1F,EAAI6D,OAAO8E,OACb,IAiGAlI,EAAcd,iBAAiB,aAAa,WAC1C2G,EAAa/G,UAAUC,IAAI,+BAC7B,IAGAiB,EAAcd,iBAAiB,YAAY,SAACK,GACrCS,EAAckC,SAAS3C,EAAI4I,gBAC9BtC,EAAa/G,UAAUO,OAAO,+BAElC,IAGAwG,EAAa3G,iBAAiB,SAAS,WACrCN,EAAUkH,GACVxB,EAAgBwB,EAAac,EAC/B,IAGAd,EAAY5G,iBAAiB,UAtGJ,SAACK,GACxBA,EAAIuH,iBACJ,IAAMsB,EAAYrC,EAAYlB,MAC9B2C,GAAiB,GHEE,SAACY,GACpB,OAAOjG,MAAM,GAAD1B,OAAIf,EAAOC,KAAI,KAAAc,OAAIf,EAAOE,SAAQ,oBAAoB,CAChEwC,OAAQ,QACRvC,QAASH,EAAOG,QAChB8H,KAAMC,KAAKC,UAAU,CACnBrB,OAAQ4B,MAET/F,KAAKlC,EACV,CGTEkI,CAAaD,GACV/F,MAAK,SAACyF,GACL9H,EAAcsG,MAAMC,gBAAkB,OAAH9F,OAAUqH,EAAKtB,OAAM,KACxDpH,EAAW0G,GACXvD,QAAQC,IAAI,8BACd,IAAE,OACK,SAAC8F,GACN/F,QAAQC,IAAI8F,EACd,IAAE,SACO,WACPd,GAAiB,EACnB,IACFjI,EAAI6D,OAAO8E,OACb,G","sources":["webpack://mesto-project-ff/webpack/bootstrap","webpack://mesto-project-ff/webpack/runtime/define property getters","webpack://mesto-project-ff/webpack/runtime/hasOwnProperty shorthand","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/api.js","webpack://mesto-project-ff/./src/components/cards.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/components/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","//функция открытия попапа\r\nconst openModal = (modal) => {\r\n  modal.classList.add(\"popup_is-animated\"); // анимация\r\n  setTimeout(() => {\r\n    modal.classList.add(\"popup_is-opened\"); // открытие\r\n  }, 1);\r\n\r\n  // Навешиваем обработчик Escape\r\n  document.addEventListener(\"keydown\", handleEscape);\r\n};\r\n\r\n//функция закрытия попапа\r\nfunction closeModal(modal) {\r\n  modal.classList.remove(\"popup_is-opened\");\r\n  document.removeEventListener(\"keydown\", handleEscape);\r\n}\r\n\r\n// Функция обработки нажатия клавиши Escape\r\nfunction handleEscape(evt) {\r\n  if (evt.key === \"Escape\") {\r\n    const openedPopup = document.querySelector(\".popup_is-opened\");\r\n    if (openedPopup) {\r\n      closeModal(openedPopup);\r\n    }\r\n  }\r\n}\r\n\r\nexport { openModal, closeModal };\r\n","import { placesList, createCard } from \"./cards.js\";\r\n\r\n//Конфиг http-запросов\r\nconst config = {\r\n  path: \"https://nomoreparties.co/v1\",\r\n  cohortId: \"wff-cohort-17\",\r\n  headers: {\r\n    authorization: \"1d7c5a36-10fe-4288-b8a8-123b41ec80c9\",\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n};\r\n\r\nlet userId = \"\";\r\n\r\nconst avatarElement = document.querySelector(\".profile__image\");\r\nconst profileTitle = document.querySelector(\".profile__title\");\r\nconst profileSubtitle = document.querySelector(\".profile__description\");\r\n\r\n//Запросы на сервер----------------------------------------------------------------\r\n\r\nconst handleRequest = (res) => {\r\n  if (res.ok) {\r\n    return res.json();\r\n  }\r\n  return Promise.reject(`Ошибка: ${res.status}`);\r\n};\r\n\r\n// Получение данных пользователя с сервера\r\nconst getUserProfile = () => {\r\n  return fetch(`${config.path}/${config.cohortId}/users/me`, {\r\n    method: \"GET\",\r\n    headers: config.headers,\r\n  }).then(handleRequest);\r\n};\r\n\r\n//Получение данных карточек\r\nconst getCards = () => {\r\n  return fetch(`${config.path}/${config.cohortId}/cards`, {\r\n    method: \"GET\",\r\n    headers: config.headers,\r\n  }).then(handleRequest);\r\n};\r\n\r\n//Объединенение запросов для получения данных пользователя и карточек\r\nconst getPromisesUserCards = () => {\r\n  Promise.all([getUserProfile(), getCards()])\r\n    .then(([userData, cardsData]) => {\r\n      //данные пользователя\r\n      console.log(\"Данные пользователя получены\", userData);\r\n      profileTitle.textContent = userData.name;\r\n      profileSubtitle.textContent = userData.about;\r\n      avatarElement.style.backgroundImage = `url(${userData.avatar})`;\r\n      userId = userData._id;\r\n\r\n      // Обработка данных карточек\r\n      console.log(\"Карточки получены\", cardsData);\r\n      cardsData.forEach((cardData) => {\r\n        const cardElement = createCard(cardData, userId);\r\n        if (cardData.owner._id !== userId) {\r\n          cardElement.querySelector(\".card__delete-button\").remove();\r\n        }\r\n        placesList.append(cardElement);\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      console.log(\"Произошла ошибка\", error);\r\n    });\r\n};\r\n\r\n//Обновление профиля\r\nconst updateProfileByUser = (name, about) => {\r\n  return fetch(`${config.path}/${config.cohortId}/users/me`, {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name: name,\r\n      about: about,\r\n    }),\r\n  })\r\n    .then(handleRequest)\r\n    .then((data) => {\r\n      console.log(\"Данные пользователя обновлены\", data);\r\n      profileTitle.textContent = data.name;\r\n      profileSubtitle.textContent = data.about;\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      console.log(\"Произошла ошибка при обновлении данных пользователя\", error);\r\n    });\r\n};\r\n\r\n// замена аватара\r\nconst updateAvatar = (avatarUrl) => {\r\n  return fetch(`${config.path}/${config.cohortId}/users/me/avatar`, {\r\n    method: \"PATCH\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      avatar: avatarUrl,\r\n    }),\r\n  }).then(handleRequest);\r\n};\r\n\r\n//Добавление новой карточки\r\nconst handleCardAdded = (nameCard, linkCard) => {\r\n  return fetch(`${config.path}/${config.cohortId}/cards`, {\r\n    method: \"POST\",\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name: nameCard,\r\n      link: linkCard,\r\n    }),\r\n  }).then(handleRequest);\r\n};\r\n\r\n//Добавление лайка\r\nconst addLike = (cardId) => {\r\n  return fetch(`${config.path}/${config.cohortId}/cards/likes/${cardId}`, {\r\n    method: \"PUT\",\r\n    headers: config.headers,\r\n  }).then(handleRequest);\r\n};\r\n\r\n//Снятие лайка\r\nconst deleteLike = (cardId) => {\r\n  return fetch(`${config.path}/${config.cohortId}/cards/likes/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers,\r\n  }).then(handleRequest);\r\n};\r\n\r\n//Удаление карточки\r\nconst deleteCard = (cardId) => {\r\n  return fetch(`${config.path}/${config.cohortId}/cards/${cardId}`, {\r\n    method: \"DELETE\",\r\n    headers: config.headers,\r\n  }).then(handleRequest);\r\n};\r\n\r\nexport {\r\n  updateProfileByUser,\r\n  updateAvatar,\r\n  getPromisesUserCards,\r\n  profileTitle,\r\n  profileSubtitle,\r\n  handleCardAdded,\r\n  deleteCard,\r\n  addLike,\r\n  deleteLike,\r\n};\r\n","// @todo: Темплейт карточки\r\nconst cardTemplate = document.querySelector(\"#card-template\").content;\r\n// DOM узлы\r\nconst placesList = document.querySelector(\".places__list\"); //Карточка\r\n\r\n//лайки\r\n\r\nimport { openModal, closeModal } from \"./modal.js\";\r\n\r\nimport { handleImageClick } from \"./index.js\";\r\n\r\nimport { deleteCard, addLike, deleteLike } from \"./api.js\";\r\n\r\nfunction createCard(card, user) {\r\n  const cardElement = cardTemplate\r\n    .querySelector(\".places__item\")\r\n    .cloneNode(true); // клонирование\r\n\r\n  const cardImage = cardElement.querySelector(\".card__image\"); // картинка определение константы\r\n  cardElement.querySelector(\".card__title\").textContent = card.name; //название карточки\r\n  cardImage.alt = card.name; // название изображения\r\n  cardImage.src = card.link; // ссылка на изображение\r\n  //лайки на карточке\r\n  const countLike = cardElement.querySelector(\".card__like-count\"); //счетчик кнопки лайк\r\n  const likeButton = cardElement.querySelector(\".card__like-button\"); //кнопка лайк\r\n  countLike.textContent = card.likes.length;\r\n\r\n  //обработчик открытия попапа/картинка\r\n  cardImage.addEventListener(\"click\", function () {\r\n    handleImageClick(card.link, card.name);\r\n  });\r\n\r\n  //установка лайка при перезагрузке\r\n  if (card.likes.some((like) => like._id === user)) {\r\n    likeButton.classList.add(\"card__like-button_is-active\");\r\n  }\r\n\r\n  //обработчик лайка карточки\r\n  cardElement\r\n    .querySelector(\".card__like-button\")\r\n    .addEventListener(\"click\", function (evt) {\r\n      if (likeButton.classList.contains(\"card__like-button_is-active\")) {\r\n        deleteLike(card._id)\r\n          .then((card) => {\r\n            likeButton.classList.toggle(\"card__like-button_is-active\");\r\n            countLike.textContent = card.likes.length;\r\n            console.log(`C карточки с id ${card._id} лайк удален`);\r\n          })\r\n          .catch((error) => console.error(\"Error removing like:\", error));\r\n      } else {\r\n        addLike(card._id)\r\n          .then((card) => {\r\n            likeButton.classList.toggle(\"card__like-button_is-active\");\r\n            countLike.textContent = card.likes.length;\r\n            console.log(`На карточку с id ${card._id} поставлен лайк`);\r\n          })\r\n          .catch((error) => console.error(\"Error adding like:\", error));\r\n      }\r\n    });\r\n\r\n  const popupDeleteCard = document.querySelector(\r\n    \".popup_type_submit-delete-card\"\r\n  );\r\n  const buttonDeletePopup = popupDeleteCard.querySelector(\".popup__button\");\r\n\r\n  //обработчик открытия попапа удаления карточки\r\n  cardElement\r\n    .querySelector(\".card__delete-button\")\r\n    .addEventListener(\"click\", function () {\r\n      openModal(popupDeleteCard);\r\n      buttonDeletePopup.currentCardId = card._id; //сохранение id карточки для удаления\r\n      // Проверка, что обработчик добавлен только 1 раз\r\n      if (!buttonDeletePopup.deleteHandlerAdded) {\r\n        buttonDeletePopup.addEventListener(\r\n          \"click\",\r\n          function handleDeleteClick() {\r\n            //удаление карточки\r\n            const cardToDeleteId = buttonDeletePopup.currentCardId;\r\n            deleteCard(cardToDeleteId)\r\n              .then(() => {\r\n                const cardToDeleteElement = document.querySelector(\r\n                  `[data-id=\"${cardToDeleteId}\"]`\r\n                );\r\n                if (cardToDeleteElement) {\r\n                  cardToDeleteElement.remove();\r\n                  console.log(`Карточка с id ${cardToDeleteId} удалена`);\r\n                } else {\r\n                  console.error(`Карточка с id ${cardToDeleteId} не найдена`);\r\n                }\r\n                closeModal(popupDeleteCard); // закрытие попапа после удаления\r\n              })\r\n              .catch((error) => {\r\n                console.error(\"Ошибка удаления карточки:\", error);\r\n              });\r\n          }\r\n        );\r\n        buttonDeletePopup.deleteHandlerAdded = true;\r\n      }\r\n    });\r\n\r\n  cardElement.dataset.id = card._id;\r\n\r\n  return cardElement; // возвращение\r\n}\r\n\r\n//функция лайка карточки\r\nfunction likeCard(evt) {\r\n  evt.target.classList.toggle(\"card__like-button_is-active\");\r\n}\r\n\r\nexport { openModal, createCard, likeCard, placesList };\r\n","//формы\r\nconst formElement = document.querySelector(\".popup__form\");\r\nconst formInput = document.querySelector(\".popup__input\");\r\nconst formButton = document.querySelector(\".popup__button\");\r\n\r\n// Функция, которая включает валидацию для всех форм\r\nconst enableValidation = (settings) => {\r\n  const formList = Array.from(document.querySelectorAll(settings.formSelector));\r\n  formList.forEach((formElement) => {\r\n    formElement.addEventListener(\"submit\", (evt) => {\r\n      evt.preventDefault();\r\n    });\r\n    setEventListeners(formElement, settings);\r\n  });\r\n};\r\n\r\n// Функция, которая добавляет класс с ошибкой\r\nconst showInputError = (formElement, formInput, errorMessage, settings) => {\r\n  const errorElement = formElement.querySelector(`.${formInput.id}-error`);\r\n  // Остальной код такой же\r\n  formInput.classList.add(settings.inputErrorClass);\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add(settings.errorClass);\r\n};\r\n\r\n// Функция, которая удаляет класс с ошибкой\r\nconst hideInputError = (formElement, formInput, settings) => {\r\n  // Находим элемент ошибки\r\n  const errorElement = formElement.querySelector(`.${formInput.id}-error`);\r\n\r\n  formInput.classList.remove(settings.inputErrorClass);\r\n  errorElement.classList.remove(settings.errorClass);\r\n  errorElement.textContent = \"\";\r\n};\r\n\r\n// Функция, которая проверяет валидность поля\r\nconst isValid = (formElement, formInput, settings) => {\r\n  if (formInput.validity.patternMismatch) {\r\n    // встроенный метод setCustomValidity принимает на вход строку\r\n    // и заменяет ею стандартное сообщение об ошибке\r\n    formInput.setCustomValidity(formInput.dataset.errorMessage);\r\n  } else {\r\n    // если передать пустую строку, то будут доступны\r\n    // стандартные браузерные сообщения\r\n    formInput.setCustomValidity(\"\");\r\n  }\r\n  if (!formInput.validity.valid) {\r\n    showInputError(\r\n      formElement,\r\n      formInput,\r\n      formInput.validationMessage,\r\n      settings\r\n    );\r\n  } else {\r\n    // hideInputError теперь получает параметром форму, в которой\r\n    // находится проверяемое поле, и само это поле\r\n    hideInputError(formElement, formInput, settings);\r\n  }\r\n};\r\n\r\nconst setEventListeners = (formElement, settings) => {\r\n  // Находим все поля внутри формы\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(settings.inputSelector)\r\n  );\r\n  const formButtonList = Array.from(\r\n    formElement.querySelectorAll(settings.submitButtonSelector)\r\n  );\r\n  //переключение кнопки\r\n  toggleButtonState(inputList, formButtonList, settings);\r\n\r\n  // Обойдём все элементы полученной коллекции\r\n  inputList.forEach((formInput) => {\r\n    // каждому полю добавим обработчик события input\r\n    formInput.addEventListener(\"input\", function () {\r\n      isValid(formElement, formInput, settings);\r\n      toggleButtonState(inputList, formButtonList, settings);\r\n    });\r\n  });\r\n};\r\n\r\nconst hasInvalidInput = (inputList) => {\r\n  return inputList.some((formInput) => {\r\n    return !formInput.validity.valid;\r\n  });\r\n};\r\n\r\nconst toggleButtonState = (inputList, formButtonList, settings) => {\r\n  formButtonList.forEach((formButton) => {\r\n    formButton.disabled = true;\r\n    if (hasInvalidInput(inputList)) {\r\n      formButton.disabled = true;\r\n      formButton.classList.add(settings.inactiveButtonClass);\r\n    } else {\r\n      formButton.disabled = false;\r\n      formButton.classList.remove(settings.inactiveButtonClass);\r\n    }\r\n  });\r\n};\r\n\r\n// Функция, которая очищает ошибки валидации формы и делает кнопку неактивной\r\nconst clearValidation = (formElement, settings) => {\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(settings.inputSelector)\r\n  );\r\n  const formButtonList = Array.from(\r\n    formElement.querySelectorAll(settings.submitButtonSelector)\r\n  );\r\n\r\n  inputList.forEach((inputElement) => {\r\n    hideInputError(formElement, inputElement, settings);\r\n    inputElement.value = \"\"; // очищаем значение поля\r\n  });\r\n  toggleButtonState(inputList, formButtonList, settings);\r\n};\r\n\r\nexport { enableValidation, clearValidation, formButton };\r\n","// @todo: DOM узлы\r\nconst buttonAddCard = document.querySelector(\".profile__add-button\"); //Кнопка_+\r\nconst buttonProfileEdit = document.querySelector(\".profile__edit-button\"); //Кнопка_edit\r\nconst popupEdit = document.querySelector(\".popup_type_edit\"); //Попап редактирования профиля\r\nconst popupAddCard = document.querySelector(\".popup_type_new-card\"); //Попап создания новой карточки\r\n//константы формы добавления карточки\r\nconst popupFormImg = document.forms[\"new-place\"];\r\nconst formImgName = popupFormImg.elements[\"place-name\"];\r\nconst formImgLink = popupFormImg.elements[\"link\"];\r\n//константы формы редактирования профиля\r\nconst popupFormProfile = document.forms[\"edit-profile\"];\r\nconst nameInput = popupFormProfile.elements[\"name\"];\r\nconst jobInput = popupFormProfile.elements[\"description\"];\r\n//константы модального окна картинки\r\nconst popImage = document.querySelector(\".popup__image\"); //картинка в модальном окне\r\nconst popImageDescription = document.querySelector(\".popup__caption\");\r\nconst popupImage = document.querySelector(\".popup_type_image\"); //Попап открытия картинки\\\r\n//константы профиля\r\nconst avatarElement = document.querySelector(\".profile__image\");\r\nconst avatarButton = document.querySelector(\".profile__image-button\");\r\n//попап редактирования автара\r\nconst popupAvatar = document.querySelector(\".popup_type_new-avatar\");\r\nconst avatarInput = document.querySelector(\".popup__input_type-vatar-link\");\r\n\r\nimport \"../index.css\";\r\nimport { createCard, likeCard, placesList } from \"./cards.js\";\r\nimport { openModal, closeModal } from \"./modal.js\";\r\nimport { enableValidation, clearValidation } from \"./validation.js\";\r\n\r\nimport {\r\n  updateProfileByUser,\r\n  updateAvatar,\r\n  getPromisesUserCards,\r\n  profileTitle,\r\n  profileSubtitle,\r\n  handleCardAdded,\r\n} from \"./api.js\";\r\n\r\n//Функции----------------------------------------------------------------\r\n//Вызовы функций\r\ngetPromisesUserCards();\r\n\r\nconst validationSettings = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__button\",\r\n  inactiveButtonClass: \"button_inactive\",\r\n  inputErrorClass: \"form__input-error\",\r\n  errorClass: \"form__input-error_active\",\r\n};\r\n\r\n// Вызов функции для включения валидации с переданными настройками\r\nenableValidation(validationSettings);\r\n\r\n//функция добавления новой карточки пользователем\r\nfunction handleCardFormSubmit(evt) {\r\n  evt.preventDefault();\r\n  const name = formImgName.value;\r\n  const link = formImgLink.value;\r\n  changeNameButton(true);\r\n\r\n  handleCardAdded(name, link)\r\n    .then((cardData) => {\r\n      placesList.prepend(createCard(cardData, { likeCard, openModal }));\r\n      console.log(\"Карточка добавлена\", cardData);\r\n    })\r\n    .catch((error) => {\r\n      console.log(\"Произошла ошибка при добавлении карточки\", error);\r\n    })\r\n    .finally(() => {\r\n      changeNameButton(false);\r\n    });\r\n  closeModal(popupAddCard);\r\n  evt.target.reset();\r\n}\r\n\r\n// Функция открытия модального окна с картинкой\r\nexport const handleImageClick = (imageSrc, imageDescription) => {\r\n  if (popImage) {\r\n    popImage.src = imageSrc;\r\n    popImage.alt = imageDescription;\r\n    popImageDescription.textContent = imageDescription;\r\n  }\r\n  openModal(popupImage);\r\n};\r\n\r\n//функция замены аватара\r\nconst handleAvatarForm = (evt) => {\r\n  evt.preventDefault();\r\n  const avatarUrl = avatarInput.value;\r\n  changeNameButton(true);\r\n  updateAvatar(avatarUrl)\r\n    .then((data) => {\r\n      avatarElement.style.backgroundImage = `url(${data.avatar})`;\r\n      closeModal(popupAvatar);\r\n      console.log(\"Автар пользователя обновлен\");\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    })\r\n    .finally(() => {\r\n      changeNameButton(false);\r\n    });\r\n  evt.target.reset();\r\n};\r\n\r\n//Функция, смены названия кнопки при обработке данных в попапе\r\nconst changeNameButton = (isLoading) => {\r\n  const formButtonList = document.querySelectorAll(\".popup__button\");\r\n  formButtonList.forEach((formButton) => {\r\n    if (formButton.textContent !== \"Да\") {\r\n      formButton.textContent = isLoading ? \"Сохранение..\" : \"Сохранить\";\r\n    }\r\n  });\r\n};\r\n\r\n//Обработчики событий----------------------------------------------------------------\r\n// обработчики событий при загрузке\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n  setupEventListeners();\r\n});\r\n\r\n// Обработчики событий для всех модальных окон\r\nfunction setupEventListeners() {\r\n  document.querySelectorAll(\".popup\").forEach((modal) => {\r\n    modal.querySelectorAll(\".popup__close\").forEach((button) => {\r\n      button.addEventListener(\"click\", () => closeModal(modal));\r\n    });\r\n\r\n    modal.addEventListener(\"click\", (evt) => {\r\n      if (evt.target === modal) {\r\n        closeModal(modal);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n//Обработчик «отправки» формы\r\nfunction handleProfileFormSubmit(evt) {\r\n  evt.preventDefault();\r\n  //поля формы\r\n  const nameValue = nameInput.value;\r\n  const jobValue = jobInput.value;\r\n\r\n  updateProfileByUser(nameValue, jobValue);\r\n  closeModal(popupEdit);\r\n}\r\n\r\n//обработчик «отправки» формы\r\npopupFormProfile.addEventListener(\"submit\", handleProfileFormSubmit);\r\n\r\n//обработчик открытия попапа/профиль\r\nbuttonProfileEdit.addEventListener(\"click\", function () {\r\n  //значения в модальном окне редактирования профиля\r\n  nameInput.value = profileTitle.textContent;\r\n  jobInput.value = profileSubtitle.textContent;\r\n  openModal(popupEdit);\r\n  clearValidation(popupEdit, validationSettings);\r\n});\r\n\r\n//обработчик открытия попапа/добавления\r\nbuttonAddCard.addEventListener(\"click\", function () {\r\n  openModal(popupAddCard);\r\n  clearValidation(popupAddCard, validationSettings);\r\n});\r\n\r\n//обработчик добавки новой карточки\r\npopupFormImg.addEventListener(\"submit\", handleCardFormSubmit);\r\n\r\n//Аватар------\r\n//Обработчик наведения на аватар/mouseover\r\navatarElement.addEventListener(\"mouseover\", () => {\r\n  avatarButton.classList.add(\"profile__image-button_active\");\r\n});\r\n\r\n//Обработчик наведения на аватар/mouseout\r\navatarElement.addEventListener(\"mouseout\", (evt) => {\r\n  if (!avatarElement.contains(evt.relatedTarget)) {\r\n    avatarButton.classList.remove(\"profile__image-button_active\");\r\n  }\r\n});\r\n\r\n//обработчик открытия редактирования аватара\r\navatarButton.addEventListener(\"click\", function () {\r\n  openModal(popupAvatar);\r\n  clearValidation(popupAvatar, validationSettings);\r\n});\r\n\r\n//обработчик «отправки» нового аватара\r\npopupAvatar.addEventListener(\"submit\", handleAvatarForm);\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","openModal","modal","classList","add","setTimeout","document","addEventListener","handleEscape","closeModal","remove","removeEventListener","evt","openedPopup","querySelector","config","path","cohortId","headers","authorization","userId","avatarElement","profileTitle","profileSubtitle","handleRequest","res","ok","json","Promise","reject","concat","status","cardTemplate","content","placesList","createCard","card","user","cardElement","cloneNode","cardImage","textContent","name","alt","src","link","countLike","likeButton","likes","length","handleImageClick","some","like","_id","cardId","contains","fetch","method","then","toggle","console","log","error","addLike","popupDeleteCard","buttonDeletePopup","currentCardId","deleteHandlerAdded","cardToDeleteId","cardToDeleteElement","dataset","id","likeCard","target","hideInputError","formElement","formInput","settings","errorElement","inputErrorClass","errorClass","toggleButtonState","inputList","formButtonList","forEach","formButton","disabled","validity","valid","hasInvalidInput","inactiveButtonClass","clearValidation","Array","from","querySelectorAll","inputSelector","submitButtonSelector","inputElement","value","buttonAddCard","buttonProfileEdit","popupEdit","popupAddCard","popupFormImg","forms","formImgName","elements","formImgLink","popupFormProfile","nameInput","jobInput","popImage","popImageDescription","popupImage","avatarButton","popupAvatar","avatarInput","all","_ref","_ref2","userData","cardsData","about","style","backgroundImage","avatar","cardData","owner","append","validationSettings","formSelector","preventDefault","patternMismatch","setCustomValidity","errorMessage","showInputError","validationMessage","isValid","setEventListeners","imageSrc","imageDescription","changeNameButton","isLoading","button","body","JSON","stringify","data","nameCard","linkCard","prepend","reset","relatedTarget","avatarUrl","updateAvatar","err"],"sourceRoot":""}